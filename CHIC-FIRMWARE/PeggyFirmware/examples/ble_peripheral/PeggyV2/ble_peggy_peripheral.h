/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.1.3139.0) */

#ifndef BLE_PEGGY_PERIPHERAL_H__
#define BLE_PEGGY_PERIPHERAL_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief Peggy peripheral event type. */
typedef enum
{ 
    BLE_PEGGY_PERIPHERAL_COIN_EVENT_NOTIFICATION_EVT_NOTIFICATION_ENABLED,  /**< Coin Event Notification value notification enabled event. */
    BLE_PEGGY_PERIPHERAL_COIN_EVENT_NOTIFICATION_EVT_NOTIFICATION_DISABLED, /**< Coin Event Notification value notification disabled event. */
    BLE_PEGGY_PERIPHERAL_COIN_EVENT_NOTIFICATION_EVT_CCCD_WRITE, /**< Coin Event Notification CCCD write event. */
    BLE_PEGGY_PERIPHERAL_PENDING_TRANSACTIONS_EVT_NOTIFICATION_ENABLED,  /**< Pending Transactions value notification enabled event. */
    BLE_PEGGY_PERIPHERAL_PENDING_TRANSACTIONS_EVT_NOTIFICATION_DISABLED, /**< Pending Transactions value notification disabled event. */
    BLE_PEGGY_PERIPHERAL_PENDING_TRANSACTIONS_INDICATOR_EVT_NOTIFICATION_ENABLED,  /**< Pending Transactions Indicator value notification enabled event. */
    BLE_PEGGY_PERIPHERAL_PENDING_TRANSACTIONS_INDICATOR_EVT_NOTIFICATION_DISABLED, /**< Pending Transactions Indicator value notification disabled event. */
    BLE_PEGGY_PERIPHERAL_PENDING_TRANSACTIONS_INDICATOR_EVT_CCCD_WRITE, /**< Pending Transactions Indicator CCCD write event. */
    BLE_PEGGY_PERIPHERAL_UUID_EVT_NOTIFICATION_ENABLED,  /**< UUID value notification enabled event. */
    BLE_PEGGY_PERIPHERAL_UUID_EVT_NOTIFICATION_DISABLED, /**< UUID value notification disabled event. */
    BLE_PEGGY_PERIPHERAL_UUID_EVT_WRITE, /**< UUID write event. */
    BLE_PEGGY_PERIPHERAL_ERASE_BONDING_EVT_NOTIFICATION_ENABLED,  /**< Erase Bonding value notification enabled event. */
    BLE_PEGGY_PERIPHERAL_ERASE_BONDING_EVT_NOTIFICATION_DISABLED, /**< Erase Bonding value notification disabled event. */
    BLE_PEGGY_PERIPHERAL_ERASE_BONDING_EVT_WRITE, /**< Erase Bonding write event. */
    BLE_PEGGY_PERIPHERAL_USER_INFORMATION_EVT_NOTIFICATION_ENABLED,  /**< User Information value notification enabled event. */
    BLE_PEGGY_PERIPHERAL_USER_INFORMATION_EVT_NOTIFICATION_DISABLED, /**< User Information value notification disabled event. */
    BLE_PEGGY_PERIPHERAL_USER_INFORMATION_EVT_WRITE, /**< User Information write event. */
} ble_peggy_peripheral_evt_type_t;

// Forward declaration of the ble_peggy_peripheral_t type.
typedef struct ble_peggy_peripheral_s ble_peggy_peripheral_t;








/**@brief Coin Event Notification structure. */
typedef struct
{
    uint8_t new_coin;
} ble_peggy_peripheral_coin_event_notification_t;
/**@brief Pending Transactions structure. */
typedef struct
{
    int8_t ones;
    int8_t fiftys;
    int8_t twenties;
    int8_t tens;
    int8_t fives;
    int8_t twos;
    uint32_t seconds;
} ble_peggy_peripheral_pending_transactions_t;
/**@brief Pending Transactions Indicator structure. */
typedef struct
{
    uint8_t pending_transactions;
} ble_peggy_peripheral_pending_transactions_indicator_t;
/**@brief UUID structure. */
typedef struct
{
    uint32_t field1;
    uint32_t field2;
    uint32_t field3;
    uint32_t field4;
} ble_peggy_peripheral_uuid_t;
/**@brief Erase Bonding structure. */
typedef struct
{
    uint8_t killcode;
} ble_peggy_peripheral_erase_bonding_t;
/**@brief User Information structure. */
typedef struct
{
    uint8_t balance_ok;
    uint8_t user;
} ble_peggy_peripheral_user_information_t;

/**@brief Peggy peripheral Service event. */
typedef struct
{
    ble_peggy_peripheral_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_peggy_peripheral_uuid_t uuid; /**< Holds decoded data in Write event handler. */
        ble_peggy_peripheral_erase_bonding_t erase_bonding; /**< Holds decoded data in Write event handler. */
        ble_peggy_peripheral_user_information_t user_information; /**< Holds decoded data in Write event handler. */
    } params;
} ble_peggy_peripheral_evt_t;

/**@brief Peggy peripheral Service event handler type. */
typedef void (*ble_peggy_peripheral_evt_handler_t) (ble_peggy_peripheral_t * p_peggy_peripheral, ble_peggy_peripheral_evt_t * p_evt);

/**@brief Peggy peripheral Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_peggy_peripheral_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the Peggy peripheral Service. */
    ble_peggy_peripheral_coin_event_notification_t ble_peggy_peripheral_coin_event_notification_initial_value; /**< If not NULL, initial value of the Coin Event Notification characteristic. */ 
    bool is_pending_transactions_read_supported; /**< TRUE if read of Pending Transactions is supported. */
    ble_peggy_peripheral_pending_transactions_t ble_peggy_peripheral_pending_transactions_initial_value; /**< If not NULL, initial value of the Pending Transactions characteristic. */ 
    ble_peggy_peripheral_pending_transactions_indicator_t ble_peggy_peripheral_pending_transactions_indicator_initial_value; /**< If not NULL, initial value of the Pending Transactions Indicator characteristic. */ 
    bool is_uuid_read_supported; /**< TRUE if read of UUID is supported. */
    bool is_uuid_write_supported;    /**< TRUE if write to UUID is supported. */ 
    ble_peggy_peripheral_uuid_t ble_peggy_peripheral_uuid_initial_value; /**< If not NULL, initial value of the UUID characteristic. */ 
    bool is_erase_bonding_write_supported;    /**< TRUE if write to Erase Bonding is supported. */ 
    ble_peggy_peripheral_erase_bonding_t ble_peggy_peripheral_erase_bonding_initial_value; /**< If not NULL, initial value of the Erase Bonding characteristic. */ 
    ble_peggy_peripheral_user_information_t ble_peggy_peripheral_user_information_initial_value; /**< If not NULL, initial value of the User Information characteristic. */ 
} ble_peggy_peripheral_init_t;

/**@brief Peggy peripheral Service structure. This contains various status information for the service.*/
struct ble_peggy_peripheral_s
{
    ble_peggy_peripheral_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the Peggy peripheral Service. */
    uint16_t service_handle; /**< Handle of Peggy peripheral Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t coin_event_notification_handles; /**< Handles related to the Coin Event Notification characteristic. */
    bool is_pending_transactions_read_supported; /**< TRUE if read of Pending Transactions is supported. */
    ble_gatts_char_handles_t pending_transactions_handles; /**< Handles related to the Pending Transactions characteristic. */
    ble_gatts_char_handles_t pending_transactions_indicator_handles; /**< Handles related to the Pending Transactions Indicator characteristic. */
    bool is_uuid_read_supported; /**< TRUE if read of UUID is supported. */
    bool is_uuid_write_supported;    /**< TRUE if write to UUID is supported. */ 
    ble_gatts_char_handles_t uuid_handles; /**< Handles related to the UUID characteristic. */
    bool is_erase_bonding_write_supported;    /**< TRUE if write to Erase Bonding is supported. */ 
    ble_gatts_char_handles_t erase_bonding_handles; /**< Handles related to the Erase Bonding characteristic. */
    ble_gatts_char_handles_t user_information_handles; /**< Handles related to the User Information characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the Peggy peripheral.
 *
 * @param[out]  p_peggy_peripheral       Peggy peripheral Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_peggy_peripheral_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_peggy_peripheral_init(ble_peggy_peripheral_t * p_peggy_peripheral, const ble_peggy_peripheral_init_t * p_peggy_peripheral_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_peggy_peripheral_on_ble_evt(ble_peggy_peripheral_t * p_peggy_peripheral, ble_evt_t * p_ble_evt);

/**@brief Function for sending the Coin Event Notification.
 *
 * @details The application calls this function after having performed a coin event notification.
 *          The coin event notification data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_peggy_peripheral                    Peggy peripheral Service structure.
 * @param[in]   p_coin_event_notification               New coin event notification.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_peggy_peripheral_coin_event_notification_send(ble_peggy_peripheral_t * p_peggy_peripheral, ble_peggy_peripheral_coin_event_notification_t * p_coin_event_notification);

/**@brief Function for setting the Pending Transactions.
 *
 * @details Sets a new value of the Pending Transactions characteristic. The new value will be sent
 *          to the client the next time the client reads the Pending Transactions characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_peggy_peripheral                 Peggy peripheral Service structure.
 * @param[in]   p_pending_transactions  New Pending Transactions.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_peggy_peripheral_pending_transactions_set(ble_peggy_peripheral_t * p_peggy_peripheral, ble_peggy_peripheral_pending_transactions_t * p_pending_transactions);

/**@brief Function for sending the Pending Transactions Indicator.
 *
 * @details The application calls this function after having performed a pending transactions indicator.
 *          The pending transactions indicator data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_peggy_peripheral                    Peggy peripheral Service structure.
 * @param[in]   p_pending_transactions_indicator               New pending transactions indicator.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_peggy_peripheral_pending_transactions_indicator_send(ble_peggy_peripheral_t * p_peggy_peripheral, ble_peggy_peripheral_pending_transactions_indicator_t * p_pending_transactions_indicator);

/**@brief Function for setting the UUID.
 *
 * @details Sets a new value of the UUID characteristic. The new value will be sent
 *          to the client the next time the client reads the UUID characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_peggy_peripheral                 Peggy peripheral Service structure.
 * @param[in]   p_uuid  New UUID.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_peggy_peripheral_uuid_set(ble_peggy_peripheral_t * p_peggy_peripheral, ble_peggy_peripheral_uuid_t * p_uuid);

#endif //_BLE_PEGGY_PERIPHERAL_H__
