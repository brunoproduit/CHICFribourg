/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.1.3135.0) */

#ifndef BLE_PEGGY_PERIPHERAL_H__
#define BLE_PEGGY_PERIPHERAL_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief pEggy peripheral event type. */
typedef enum
{ 
    BLE_PEGGY_PERIPHERAL_COIN_EVENT_NOTIFICATION_EVT_NOTIFICATION_ENABLED,  /**< Coin Event Notification value notification enabled event. */
    BLE_PEGGY_PERIPHERAL_COIN_EVENT_NOTIFICATION_EVT_NOTIFICATION_DISABLED, /**< Coin Event Notification value notification disabled event. */
    BLE_PEGGY_PERIPHERAL_COIN_EVENT_NOTIFICATION_EVT_CCCD_WRITE, /**< Coin Event Notification CCCD write event. */
    BLE_PEGGY_PERIPHERAL_DATE_TIME_EVT_NOTIFICATION_ENABLED,  /**< Date Time value notification enabled event. */
    BLE_PEGGY_PERIPHERAL_DATE_TIME_EVT_NOTIFICATION_DISABLED, /**< Date Time value notification disabled event. */
    BLE_PEGGY_PERIPHERAL_DATE_TIME_EVT_WRITE, /**< Date Time write event. */
    BLE_PEGGY_PERIPHERAL_PENDING_TRANSACTIONS_EVT_NOTIFICATION_ENABLED,  /**< Pending Transactions value notification enabled event. */
    BLE_PEGGY_PERIPHERAL_PENDING_TRANSACTIONS_EVT_NOTIFICATION_DISABLED, /**< Pending Transactions value notification disabled event. */
    BLE_PEGGY_PERIPHERAL_PENDING_TRANSACTIONS_INDICATOR_EVT_NOTIFICATION_ENABLED,  /**< Pending Transactions Indicator value notification enabled event. */
    BLE_PEGGY_PERIPHERAL_PENDING_TRANSACTIONS_INDICATOR_EVT_NOTIFICATION_DISABLED, /**< Pending Transactions Indicator value notification disabled event. */
    BLE_PEGGY_PERIPHERAL_PENDING_TRANSACTIONS_INDICATOR_EVT_CCCD_WRITE, /**< Pending Transactions Indicator CCCD write event. */
} ble_peggy_peripheral_evt_type_t;

// Forward declaration of the ble_peggy_peripheral_t type.
typedef struct ble_peggy_peripheral_s ble_peggy_peripheral_t;






typedef enum
{ 
    MONTH_MONTH_IS_NOT_KNOWN = 0, 
    MONTH_JANUARY = 1, 
    MONTH_FEBRUARY = 2, 
    MONTH_MARCH = 3, 
    MONTH_APRIL = 4, 
    MONTH_MAY = 5, 
    MONTH_JUNE = 6, 
    MONTH_JULY = 7, 
    MONTH_AUGUST = 8, 
    MONTH_SEPTEMBER = 9, 
    MONTH_OCTOBER = 10, 
    MONTH_NOVEMBER = 11, 
    MONTH_DECEMBER = 12, 
} enum_month_t; 
typedef struct
{
    enum_month_t month; 
} date_time_month_t; 

typedef struct
{
    enum_month_t month; 
} pending_transactions_month_t; 


/**@brief Coin Event Notification structure. */
typedef struct
{
    uint8_t new_coin;
} ble_peggy_peripheral_coin_event_notification_t;
/**@brief Date Time structure. */
typedef struct
{
    uint16_t year;
    date_time_month_t month;
    uint8_t day;
    uint8_t hours;
    uint8_t minutes;
    uint8_t seconds;
} ble_peggy_peripheral_date_time_t;
/**@brief Pending Transactions structure. */
typedef struct
{
    uint16_t year;
    pending_transactions_month_t month;
    uint8_t day;
    uint8_t hours;
    uint8_t minutes;
    int8_t fives;
    int8_t twos;
    int8_t ones;
    int8_t fiftys;
    int8_t twenties;
    int8_t tens;
} ble_peggy_peripheral_pending_transactions_t;

/**@brief Pending Transactions Indicator structure. */
typedef struct
{
    bool pending_transactions;
} ble_peggy_peripheral_pending_transactions_indicator_t;

/**@brief pEggy peripheral Service event. */
typedef struct
{
    ble_peggy_peripheral_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_peggy_peripheral_date_time_t date_time; /**< Holds decoded data in Write event handler. */
    } params;
} ble_peggy_peripheral_evt_t;

/**@brief pEggy peripheral Service event handler type. */
typedef void (*ble_peggy_peripheral_evt_handler_t) (ble_peggy_peripheral_t * p_peggy_peripheral, ble_peggy_peripheral_evt_t * p_evt);

/**@brief pEggy peripheral Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_peggy_peripheral_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the pEggy peripheral Service. */
    ble_peggy_peripheral_coin_event_notification_t ble_peggy_peripheral_coin_event_notification_initial_value; /**< If not NULL, initial value of the Coin Event Notification characteristic. */ 
    bool is_date_time_read_supported; /**< TRUE if read of Date Time is supported. */
    bool is_date_time_write_supported;    /**< TRUE if write to Date Time is supported. */ 
    ble_peggy_peripheral_date_time_t ble_peggy_peripheral_date_time_initial_value; /**< If not NULL, initial value of the Date Time characteristic. */ 
    bool is_pending_transactions_read_supported; /**< TRUE if read of Pending Transactions is supported. */
    ble_peggy_peripheral_pending_transactions_t ble_peggy_peripheral_pending_transactions_initial_value; /**< If not NULL, initial value of the Pending Transactions characteristic. */ 
    ble_peggy_peripheral_pending_transactions_indicator_t ble_peggy_peripheral_pending_transactions_indicator_initial_value; /**< If not NULL, initial value of the Pending Transactions Indicator characteristic. */ 
} ble_peggy_peripheral_init_t;

/**@brief pEggy peripheral Service structure. This contains various status information for the service.*/
struct ble_peggy_peripheral_s
{
    ble_peggy_peripheral_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the pEggy peripheral Service. */
    uint16_t service_handle; /**< Handle of pEggy peripheral Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t coin_event_notification_handles; /**< Handles related to the Coin Event Notification characteristic. */
    bool is_date_time_read_supported; /**< TRUE if read of Date Time is supported. */
    bool is_date_time_write_supported;    /**< TRUE if write to Date Time is supported. */ 
    ble_gatts_char_handles_t date_time_handles; /**< Handles related to the Date Time characteristic. */
    bool is_pending_transactions_read_supported; /**< TRUE if read of Pending Transactions is supported. */
    ble_gatts_char_handles_t pending_transactions_handles; /**< Handles related to the Pending Transactions characteristic. */
    ble_gatts_char_handles_t pending_transactions_indicator_handles; /**< Handles related to the Pending Transactions Indicator characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the pEggy peripheral.
 *
 * @param[out]  p_peggy_peripheral       pEggy peripheral Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_peggy_peripheral_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_peggy_peripheral_init(ble_peggy_peripheral_t * p_peggy_peripheral, const ble_peggy_peripheral_init_t * p_peggy_peripheral_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_peggy_peripheral_on_ble_evt(ble_peggy_peripheral_t * p_peggy_peripheral, ble_evt_t * p_ble_evt);

/**@brief Function for sending the Coin Event Notification.
 *
 * @details The application calls this function after having performed a coin event notification.
 *          The coin event notification data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_peggy_peripheral                    pEggy peripheral Service structure.
 * @param[in]   p_coin_event_notification               New coin event notification.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_peggy_peripheral_coin_event_notification_send(ble_peggy_peripheral_t * p_peggy_peripheral, ble_peggy_peripheral_coin_event_notification_t * p_coin_event_notification);

/**@brief Function for setting the Date Time.
 *
 * @details Sets a new value of the Date Time characteristic. The new value will be sent
 *          to the client the next time the client reads the Date Time characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_peggy_peripheral                 pEggy peripheral Service structure.
 * @param[in]   p_date_time  New Date Time.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_peggy_peripheral_date_time_set(ble_peggy_peripheral_t * p_peggy_peripheral, ble_peggy_peripheral_date_time_t * p_date_time);

/**@brief Function for setting the Pending Transactions.
 *
 * @details Sets a new value of the Pending Transactions characteristic. The new value will be sent
 *          to the client the next time the client reads the Pending Transactions characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_peggy_peripheral                 pEggy peripheral Service structure.
 * @param[in]   p_pending_transactions  New Pending Transactions.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_peggy_peripheral_pending_transactions_set(ble_peggy_peripheral_t * p_peggy_peripheral, ble_peggy_peripheral_pending_transactions_t * p_pending_transactions);

/**@brief Function for sending the Pending Transactions Indicator.
 *
 * @details The application calls this function after having performed a pending transactions indicator.
 *          The pending transactions indicator data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_peggy_peripheral                    pEggy peripheral Service structure.
 * @param[in]   p_pending_transactions_indicator               New pending transactions indicator.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_peggy_peripheral_pending_transactions_indicator_send(ble_peggy_peripheral_t * p_peggy_peripheral, ble_peggy_peripheral_pending_transactions_indicator_t * p_pending_transactions_indicator);

#endif //_BLE_PEGGY_PERIPHERAL_H__
